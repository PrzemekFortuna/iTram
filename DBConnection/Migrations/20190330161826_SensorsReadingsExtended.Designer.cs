// <auto-generated />
using System;
using DBConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DBConnection.Migrations
{
    [DbContext(typeof(TramContext))]
    [Migration("20190330161826_SensorsReadingsExtended")]
    partial class SensorsReadingsExtended
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBConnection.Entities.Sensors.Accelerometer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Ax");

                    b.Property<double?>("Ay");

                    b.Property<double?>("Az");

                    b.HasKey("Id");

                    b.ToTable("SensorsReadings");
                });

            modelBuilder.Entity("DBConnection.Entities.Sensors.Gyroscope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Gx");

                    b.Property<double?>("Gy");

                    b.Property<double?>("Gz");

                    b.HasKey("Id");

                    b.ToTable("SensorsReadings");
                });

            modelBuilder.Entity("DBConnection.Entities.Sensors.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.HasKey("Id");

                    b.ToTable("SensorsReadings");
                });

            modelBuilder.Entity("DBConnection.Entities.SensorsReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BatteryLevel");

                    b.HasKey("Id");

                    b.ToTable("SensorsReadings");
                });

            modelBuilder.Entity("DBConnection.Entities.Tram", b =>
                {
                    b.Property<int>("TramId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("Number");

                    b.HasKey("TramId");

                    b.ToTable("Trams");
                });

            modelBuilder.Entity("DBConnection.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Lastname");

                    b.Property<string>("Name");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "user1@gmail.com",
                            Lastname = "Kowalski",
                            Name = "Jan",
                            Password = "password1"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@gmail.com",
                            Lastname = "Kowalski",
                            Name = "Jan",
                            Password = "password2"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "user3@gmail.com",
                            Lastname = "Kowalski",
                            Name = "Jan",
                            Password = "password3"
                        });
                });

            modelBuilder.Entity("DBConnection.Entities.Sensors.Accelerometer", b =>
                {
                    b.HasOne("DBConnection.Entities.SensorsReading", "Reading")
                        .WithOne("Accelerometer")
                        .HasForeignKey("DBConnection.Entities.Sensors.Accelerometer", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBConnection.Entities.Sensors.Gyroscope", b =>
                {
                    b.HasOne("DBConnection.Entities.SensorsReading", "Reading")
                        .WithOne("Gyroscope")
                        .HasForeignKey("DBConnection.Entities.Sensors.Gyroscope", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBConnection.Entities.Sensors.Location", b =>
                {
                    b.HasOne("DBConnection.Entities.SensorsReading", "Reading")
                        .WithOne("Location")
                        .HasForeignKey("DBConnection.Entities.Sensors.Location", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
